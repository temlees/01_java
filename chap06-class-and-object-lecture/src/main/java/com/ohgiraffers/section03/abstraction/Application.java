package main.java.com.ohgiraffers.section03.abstraction;

import java.util.Scanner;

public class Application {
    public static void main(String[] args) {

        /*
         *
         * 객체 지향 프로그래밍이란 ?
         * 현실세계에 모든 사건은 객체와 상호작용에 의해일어난다는 세계관을
         * 프로그램을 만들 때 이용하여 새로은 세계를 창조하는 방법론
         * 현실 세계와 닮아있지만 다른점은 객체간의 상호작용을 한다는
         * 사실은 현실세계와 동일하지만 의인화 기법이 적용되어 현실세계에서
         * 불가능한 무생물이나 개념 같은 존재들도 하나의 주체로
         * 본인의 상태를 스스로 제어하고 행동하도록 한다는 것이 다른점.
         * */

        /*
         * 객체를 설계하기 위해서는 복잡한 현실세계를 그대로 반영하기에는
         * 너무 방대하고 복잡하기 떄문에 현실 세계를 프로그램의 목적에 맞게
         * 단순화하는 추상화 라는 기법 적용을 하게 된다
         *
         * 추상화란 ?
         * 공통된 부분을 추출하고 공통되지 않은부분을 제거한다는 의미
         * 추상화의 목적은 유연성을 확보하기 위함
         * 유연성 확보는 여러 곳에 적용될 수 있는 유연한객체를 의미하
         * 즉 재사용성이 높아질 수 있게한다는 의미이다
         * 객체 재사용성이 증가하면 중복 코드를 줄일 수 있으면
         * 오류 발생 가능성 감소, 유지보수성 증가 하게된다.
         * */

        /*
         * 객체와 객체의 상호작용?
         * 객체와 객체는 메세지를 통해 서로 상호작용한다.
         * 메세지를 보내는 쪽(메소드호출)을 송신자 라고 하고,
         * 메세지를 수신하는 쪽은 수신자 라고 한다.
         * 수신자는 메세지를 전달 받아 그 메세지에 해당하는 내용을 처리하는
         * 방법을 스스로 결정하고 , 그 결정한 방법 대로 처리할 명령어들을
         * 순차적으로 기술한 것이 메소드 이다
         * 상호작용에 중요한 것은 메세지를 송수신 하고 그 방법을 기술하여 메세지에
         * 응답하는 상호작용를 설계하는 것이다.
         * 따라서 객체를 설계할 때는 속성은 부가적이며 적절한 책임을 가진 객체들간의
         * 주고받는 메세지를 이용해 상호작용하는 것을 설계하는 것을 의미
         * 즉,필드보다는 메소드를 중점으로 추상화 기법을 적용하여 객체를 설계하고
         * 그 객체를 구현한느 방법으로 설계한대로 클래스를 작성하는 것이다.
         * */

        /*
         * 프로그램 개요
         * 카레이서가 자동차를 운전하는 프로그램.
         *
         * 시스템 요구사항.
         * 1. 카레이서는 시동 걸기 ,엑셀밟기 브레이크 밟기 시동 끄기를 할 수 있다
         * 2. 자동차는 시동걸기 앞으로 가기 멈추기 시동끄기
         * 3. 자동차는 처음에 멈춘상태(시동이 꺼진 상태)러 대기한다
         * 4. 카레이서는 먼저 자동차에 시동을 건다.이미 걸려있는 경우 다시 걸 수 없다
         * 5. 카레이서가 엑셀을 밟으면 시동이 걸린 상태일경우 10km/h 씩 증가하며 나아간다
         * 6. 자동차가 달리는 중인 경우 브레이크를 밟으면 자동차의 시속은 0으로 떨어지며 멈춘다
         * 7. 브레이크를 밟을떄 자동차가 달리는 중이 아니라면 이미 멈춰있는 상태라고 안내한다
         * 8. 카레이서가 시동을 끄면 더이상 움직이지 않는다
         * 9. 자동차가 달리는 중이라면 시동을 끌 수없다.
         *
         * */

        /*
        * 1. 객체 도출
        * -플레이어(사용자 - 어플리케이션),자동차,카레이서
        *
        * 2. 객체간 상호작용
        * -카레이서가 수신할 수 있는 메세지(카레이서가 해야하는 일)
        * 1. 시동을 걸어라
        * 2. 엑셀을 밟아라
        * 3. 브레이크를 밟아라
        * 4. 시동을 꺼라
        *
        * -자동차가 수신할 수 있는 메세지(자동차가 해야하는 일)
        * 1. 시동을 걸어라
        * 2. 앞으로 가라
        * 3, 멈춰라
        * 4. 시동을 꺼라
        * */

          /* 목차 3. 커뮤니케이션 다이어그램 (동적)
                *   1. 시동 걸기
         *     ---------                         ----------                           --------
                *     | 사용자 |  ---> 시동을 걸어라 ---> | 카레이서 | ---> 시동을 걸어라 --->   | 자동차 |
         *     ---------  <-------------------   ---------- <---------------------    ---------
                *   2. 가속 하기
         *     ---------                               ----------                         --------
                *     | 사용자 |  ---> 엑셀레이터를 밟아라 ---> | 카레이서 | ---> 앞으로 가라 --->   | 자동차 |
         *     ---------  <------------------------   ---------- <--------------------   ---------
                *   3. 정지하기
                *     ---------                             ----------                     --------
                *     | 사용자 |  ---> 브레이크를 밟아라 ---> | 카레이서 | ---> 멈춰라 --->   | 자동차 |
         *     ---------  <-----------------------  ----------   <--------------   ---------
                *   4. 시동 끄기
         *     ---------                        ----------                        --------
                *     | 사용자 |  ---> 시동을 꺼라 ---> | 카레이서 | ---> 시동을 꺼라 --->   | 자동차 |
         *     ---------  <-------------------  ---------- <------------------   ---------
        */
/*
        4. 클래스 설계

        1. 카레이서 클래스
                -속성(필드) : 자동차
                -행위 : 시동걸기,엑셀밟기,브레이크밟기,시동끄기
        2. 자동차 클래스
                -속성 : 시동 상태, 현재속도
                -행위 : 시동걸기,앞으로 가기,멈추기 ,시동끄기

 */

        //카레이서 한명 만들기
        CarRacer carRacer = new CarRacer();
        Scanner sc = new Scanner(System.in);

        while(true){
            System.out.println("----카레이싱 프로그램-----------");
            System.out.println("1.시동걸기");
            System.out.println("2. 전진");
            System.out.println("3. 정지");
            System.out.println("4.시동끄기");
            System.out.println("5. 프로그램 종료");
            System.out.println("메뉴선택  :");
            int no = sc.nextInt();

            switch(no){
                case 1 : carRacer.startUp(); break;
                case 2 : carRacer.stepAccelator(); break;
                case 3 : carRacer.stepBreak(); break;
                case 4 : carRacer.turnOff(); break;
                case 9 :
                    System.out.println("프로그램 종료합니다 "); return;  //return은 main 메소드를 끝낸다
                default:
                    System.out.println("잘못된 번호를 선택히셨습니다"); break;
            }
        }//while ㅇ



    }//main
}//class
